# This file contains the different endpoints your bot can use.

# Server where the models are pulled from.
# https://rasa.com/docs/rasa/model-storage#fetching-models-from-a-server

#models:
#  url: http://my-server.com/models/default_core@latest
#  wait_time_between_pulls:  10   # [optional](default: 100)

# Server which runs your custom actions.
# https://rasa.com/docs/rasa/custom-actions
# Comment out for Render deployment (no action server yet)
#action_endpoint:
#  url: "http://localhost:5055/webhook"

# Tracker store - Use in-memory for Render deployment


# PRODUCTION PostgreSQL Configuration (if you add a database later)
# Uncomment and configure when you add a PostgreSQL service in Render
#tracker_store:
#  type: SQL
#  dialect: "postgresql"
#  url: "${DATABASE_URL}"  # Render provides this automatically
#  # No need to specify individual connection details when using DATABASE_URL

# LOCAL DEVELOPMENT Configuration (commented out for deployment)
tracker_store:
  type: SQL
  dialect: "postgresql"
  url: "localhost"
  port: 5432
  username: "postgres"
  password: "HBX814"
  db: "rasa"

# Other tracker store options for reference
#tracker_store:
#    type: redis
#    url: <host of the redis instance, e.g. localhost>
#    port: <port of your redis instance, usually 6379>
#    db: <number of your database within redis, e.g. 0>
#    password: <password used for authentication>
#    use_ssl: <whether or not the communication is encrypted, default false>

#tracker_store:
#    type: mongod
#    url: <url to your mongo instance, e.g. mongodb://localhost:27017>
#    db: <name of the db within your mongo instance, e.g. rasa>
#    username: <username used for authentication>
#    password: <password used for authentication>

# Event broker which all conversation events should be streamed to.
# https://rasa.com/docs/rasa/event-brokers

#event_broker:
#  url: localhost
#  username: username
#  password: password
#  queue: queue
